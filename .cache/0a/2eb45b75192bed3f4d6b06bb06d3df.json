{"id":"ejercicios/scope.html","dependencies":[{"name":"D:\\msagrerom\\Desktop\\p_video\\package.json","includedInParent":true,"mtime":1569009300981}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>Scope</title>\r\n</head>\r\n<body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n    <p>El Scope o ámbito es lo que define el tiempo de vida de una variable, en que partes de nuestro código pueden ser usadas.</p>\r\n    <div>\r\n            <h3>Global Scope</h3>\r\n            <p>Variables disponibles de forma global se usa la palabra var, son accesibles por todos los scripts que se cargan en la página. Aquí hay mucho riesgo de sobreescritura. </p>\r\n    </div>\r\n    <div>\r\n            <h3>Function Scope</h3>\r\n            <p> Variables declaradas dentro de una función sólo visibles dentro de ella misma (incluyendo los argumentos que se pasan a la función).</p>\r\n    </div>\r\n    <div>\r\n            <h3>Block Scope</h3>\r\n            <p>Variables definidas dentro de un bloque, por ejemplo variables declaradas dentro un loop while o for. Se usa let y const para declarar este tipo de variables.</p>\r\n    </div>\r\n    <div>\r\n            <h3> Module Scope</h3>\r\n            <p>Cuando se denota un script de tipo module con el atributo type=\"module las variables son limitadas al archivo en el que están declaradas. cuando usamos react estamos usando modules</p>\r\n    </div>\r\n            \r\n    <script src=\"https://unpkg.com/jquery@3.3.1/dist/jquery.js\"></script>\r\n    <script>//Global Scope (objeto window)\nvar message = \"hello kitty\"; //scope de funciones:\n//var $ = function(message) {\n// console.log('Say ' + message);\n//}\n//Function scope\n\n/*function printNumbers(params) {\r\n    var i;\r\n    for (i = 0; i < 10; i++) {\r\n    function eventuallyPrintNumber (n) {\r\n          setTimeout(function () {\r\n              console.log(n)\r\n          }, 100);\r\n      }\r\n      eventuallyPrintNumber(i)\r\n    }\r\n      \r\n  }*/\n//Block scope\n\nfunction printNumbers2(params) {\n  for (let i = 0; i < 10; i++) {\n    setTimeout(function () {\n      console.log(i);\n    }, 100);\n  }\n}\n\nprintNumbers2(); //module Scope \n//las variables solo estarán disponibles en su propio archivo.\n//<sript type = \"module\" src=\"\"></script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"37879cd65acdccb8a630f80b787c7776","cacheData":{"env":{}}}