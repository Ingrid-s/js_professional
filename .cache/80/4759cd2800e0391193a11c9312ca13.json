{"id":"ejercicios/prototype.html","dependencies":[{"name":"D:\\msagrerom\\Desktop\\p_video\\package.json","includedInParent":true,"mtime":1569009300981}],"generated":{"html":"<html>\r\n  <head>\r\n    <title>Prototype</title>\r\n  </head>\r\n\r\n  <body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n    <script>//Un objeto común y corriente\n\n/*const zelda = {\r\n  name: 'Zelda',\r\n};\r\n zelda.saludar = function() {\r\n console.log(`Hola soy ${this.name}`);\r\n};\r\n zelda.saludar();\r\n const link = {\r\n name: 'Link',\r\n};\r\n  link.saludar = function() {\r\n  console.log(`Hola soy ${this.name}`);\r\n};\r\n  link.saludar();*/\n//Seamos un poco más eficientes\n\n/*function Hero(name) {\r\n  const hero = {\r\n   name: name,\r\n  };\r\n   hero.saludar = function() {\r\n    console.log(`Hola soy ${this.name}`);\r\n };\r\n     return hero;\r\n }\r\nconst zelda = Hero('Zelda');\r\nzelda.saludar();\r\n  const link = Hero('Link');\r\n link.saludar();*/\n// Aun podemos mejorar más y evitar tener que crear la misma función cada vez\n// const heroMethods = {\n//   saludar: function() {\n//     console.log(`Me llamo ${this.name}`);\n//   },\n// };\n// function Hero(name) {\n//   const hero = {\n//     name: name,\n//   };\n//   hero.saludar = heroMethods.saludar;\n//   return hero;\n// }\n// const zelda = Hero('Zelda');\n// zelda.saludar();\n// const link = Hero('Link');\n// link.saludar();\n// Object.create\n// const nuevoObjeto = Object.create(objeto)\n// const heroMethods = {\n//   saludar: function() {\n//     console.log(`Soy superheroe! ${this.name}`);\n//   },\n// };\n// function Hero(name) {\n//   const hero = Object.create(heroMethods);\n//   hero.name = name;\n//   return hero;\n// }\n// const zelda = Hero('Zelda');\n// zelda.saludar();\n// const link = Hero('Link');\n// link.saludar();\n// Los métodos de hero dentro de Hero\n// const heroMethods = {\n//   saludar: function() {\n//     console.log(`Soy superheroe! ${this.name}`);\n//   },\n// };\n// function Hero(name) {\n//   const hero = Object.create(Hero.prototype);\n//   hero.name = name;\n//   return hero;\n// }\n// Hero.prototype.saludar = function() {\n//   console.log(`Soy superheroina! ${this.name}`);\n// };\n// const zelda = Hero('Zelda');\n// zelda.saludar();\n// const link = Hero('Link');\n// link.saludar();\n// new es un atajo (azucar sintactica) para llevar Hero.prototype al objeto que estamos creando\n\n/*function Hero(name) {\r\n  // this = Object.create(Hero.prototype);\r\n  this.name = name;\r\n  // return this;\r\n}\r\n  Hero.prototype.saludar = function() {\r\n  console.log(`New: ${this.name}`);\r\n};\r\n  const zelda = new Hero('Zelda');\r\nzelda.saludar();\r\n  const link = new Hero('Link');\r\nlink.saludar();*/</script>\r\n  </body>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"b2bfd57f2fef7badc6f7ec4b79cda389","cacheData":{"env":{}}}