{"id":"ejercicios/call-aply-bind.html","dependencies":[{"name":"D:\\msagrerom\\Desktop\\p_video\\package.json","includedInParent":true,"mtime":1569009300981}],"generated":{"html":"<html>\r\n  <head>\r\n    <title>\r\n      Function.prototype.call, Function.prototype.apply, Function.prototype.bind\r\n    </title>\r\n  </head>\r\n\r\n  <body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n\r\n    <ul>\r\n      <li><button class=\"call-to-action\">Aprender</button></li>\r\n      <li><button class=\"call-to-action\">Aprender Más</button></li>\r\n      <li><button class=\"call-to-action\">¡Nunca parar de Aprender!</button></li>\r\n    </ul>\r\n\r\n    <script>// Establece `this` usando `call`\nfunction saludar() {\n  console.log(`Hola, soy ${this.name} ${this.lastName}`);\n}\n\nconst kate = {\n  name: \"Kate\",\n  lastName: \"Winslet\" //las funciones call, aply y bind \n  //con call pasamos los argumentos como lista\n\n};\nsaludar.call(kate); // Establece `this` usando `call` y pasar argumentos a la función\n\nfunction caminar(metros, direccion) {\n  console.log(`${this.name} camina ${metros} metros hacia ${direccion}.`);\n} //con call pasamos los argumentos separados por comas, como argumentos separados.\n\n\ncaminar.call(kate, 400, 'norte'); // Establece `this` usando `apply` y pasar argumentos a la función como arreglo\n//caminar.apply(kate, [800, 'noreste'])\n\nconst valores = [800, 'noreste'];\ncaminar.apply(kate, valores);\n/*tip de Richard:\r\nCall -> con C de comas, argumentos separados por comas.\r\nAply -> con A de arreglo, argumenos en un arreglo.\r\n*/\n// Establecer `this` en una nueva función usando `bind`\n//construye una nueva función y esta tendrá el this integrado\n\nconst nicole = {\n  name: 'Nicole',\n  lastName: 'Kidman'\n};\nconst nicoleSaluda = saludar.bind(nicole);\nnicoleSaluda(); //const nicoleCamina = caminar.bind(nicole)\n//nicoleCamina(1000, 'este');\n// otra forma de pasar los argumentos en bind es:\n//const nicoleCamina = caminar.bind(nicole, 250, 'oeste');\n//nicoleCamina()\n// tambien podemos pasarle sólo algunos argumentos y el resto en el llamado a la función:\n//a esto se le conoce como Currying\n\nconst nicoleCamina = caminar.bind(nicole, 3000);\nnicoleCamina('sur'); // Cuándo es útil usar uno de estos métodos\n\nconst buttons = document.getElementsByClassName('call-to-action'); //buttons.forEach(button => {\n//   button.onclick = () => alert('Nunca pares de aprender');\n//})\n\n/*NodeList no es un arreglo, por eso no funciona el forEach, \r\naquí le damos el contexto de buttons, que es this y tiene length, \r\ncon eso basta para que forEach pueda operar en una node list collection*/\n\nArray.prototype.forEach.call(buttons, button => {\n  button.onclick = () => alert('Nunca pares de aprender');\n});</script>\r\n  </body>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"3373670b0937a6172d4ce84a5b4d35b2","cacheData":{"env":{}}}