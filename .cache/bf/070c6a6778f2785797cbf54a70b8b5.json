{"id":"ejercicios/this.html","dependencies":[{"name":"D:\\msagrerom\\Desktop\\p_video\\package.json","includedInParent":true,"mtime":1569009300981}],"generated":{"html":"<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>This</title>\r\n</head>\r\n<body>\r\n        <a href=\"/ejercicios/\">Go back</a>\r\n        <p><em>Abre la consola</em></p>\r\n        <div>\r\n            <h3>This</h3>\r\n            <p>this se refiere a un objeto, ese objeto es el que actualmente está ejecutando un pedazo de código.</p>\r\n            <p>No se puede asignar un valor a this directamente y este depende de en que scope nos encontramos:</p>\r\n            <ul>\r\n                <li>Cuando llamamos a this en el Global Scope o Function Scope, se hace referencia al objeto window. A excepción de cuando estamos en strict mode que nos regresará undefined.</li>\r\n                <li>Cuando llamamos a this desde una función que está contenida en un objeto, this se hace referencia a ese objeto.</li>\r\n                <li>Cuando llamamos a this desde una “clase”, se hace referencia a la instancia generada por el constructor.</li>\r\n            </ul>\r\n        </div>\r\n\r\n        <script>// this en el scope global es window\n//console.log(`this: ${this}`)\n//this en el scope de una función\n\n/*function whoIsThis(){\r\n    return this;\r\n}\r\nconsole.log(`whoIsThis(): ${whoIsThis()}`)*/\n////this en el scope de una función usando strict mode\n\n/*function whoIsThisStrict(){\r\n    \"use strict\";\r\n    return this;\r\n}\r\nconsole.log(`whoIsThisStrict(): ${whoIsThisStrict()}`)*/\n///This en el contexto de un objeto\nconst person = {\n  name: 'Carol',\n  saludar: function () {\n    console.log(`Hello I'm ${this.name}`);\n  }\n};\nperson.saludar(); // this cuando sacamos la funcion de un objeto\n//en este caso la función acción no nos devuelve un nombre porque saludar esta dentro de el objeto anterior\n\n/*const accion = person.saludar;\r\naccion()*/\n//this en el contexto de una \"clase\" más bien prototipo.\n//acà this, funciona como parte del constructor y se referira a la instancia y no al objeto original, en este caso Person.\n\nfunction Person(name) {\n  this.name = name;\n}\n\nPerson.prototype.saludar = function () {\n  console.log(`Hola, me llamo ${this.name}`);\n};\n\nconst theresse = new Person('Theresse');\ntheresse.saludar();</script>\r\n</body>\r\n</html>"},"sourceMaps":null,"error":null,"hash":"14b3f911f6a1bc84d398a735ae7642d0","cacheData":{"env":{}}}